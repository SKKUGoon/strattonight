// Code generated by ent, DO NOT EDIT.

package streamrequest

import (
	"entgo.io/ent/dialect/sql"
	"github.com/skkugoon/strattonight/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLTE(FieldID, id))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldRequestID, v))
}

// RequestType applies equality check predicate on the "request_type" field. It's identical to RequestTypeEQ.
func RequestType(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldRequestType, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldIsActive, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v int) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLTE(FieldRequestID, v))
}

// RequestTypeEQ applies the EQ predicate on the "request_type" field.
func RequestTypeEQ(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldRequestType, v))
}

// RequestTypeNEQ applies the NEQ predicate on the "request_type" field.
func RequestTypeNEQ(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNEQ(FieldRequestType, v))
}

// RequestTypeIn applies the In predicate on the "request_type" field.
func RequestTypeIn(vs ...string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldIn(FieldRequestType, vs...))
}

// RequestTypeNotIn applies the NotIn predicate on the "request_type" field.
func RequestTypeNotIn(vs ...string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNotIn(FieldRequestType, vs...))
}

// RequestTypeGT applies the GT predicate on the "request_type" field.
func RequestTypeGT(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGT(FieldRequestType, v))
}

// RequestTypeGTE applies the GTE predicate on the "request_type" field.
func RequestTypeGTE(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldGTE(FieldRequestType, v))
}

// RequestTypeLT applies the LT predicate on the "request_type" field.
func RequestTypeLT(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLT(FieldRequestType, v))
}

// RequestTypeLTE applies the LTE predicate on the "request_type" field.
func RequestTypeLTE(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldLTE(FieldRequestType, v))
}

// RequestTypeContains applies the Contains predicate on the "request_type" field.
func RequestTypeContains(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldContains(FieldRequestType, v))
}

// RequestTypeHasPrefix applies the HasPrefix predicate on the "request_type" field.
func RequestTypeHasPrefix(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldHasPrefix(FieldRequestType, v))
}

// RequestTypeHasSuffix applies the HasSuffix predicate on the "request_type" field.
func RequestTypeHasSuffix(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldHasSuffix(FieldRequestType, v))
}

// RequestTypeEqualFold applies the EqualFold predicate on the "request_type" field.
func RequestTypeEqualFold(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEqualFold(FieldRequestType, v))
}

// RequestTypeContainsFold applies the ContainsFold predicate on the "request_type" field.
func RequestTypeContainsFold(v string) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldContainsFold(FieldRequestType, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.StreamRequest {
	return predicate.StreamRequest(sql.FieldNEQ(FieldIsActive, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StreamRequest) predicate.StreamRequest {
	return predicate.StreamRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StreamRequest) predicate.StreamRequest {
	return predicate.StreamRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StreamRequest) predicate.StreamRequest {
	return predicate.StreamRequest(sql.NotPredicates(p))
}
